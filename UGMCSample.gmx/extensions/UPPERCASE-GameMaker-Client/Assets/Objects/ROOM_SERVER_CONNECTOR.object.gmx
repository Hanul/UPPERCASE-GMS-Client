<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init.

is_using_native = false;

send_key = 0;

enter_room_names = ds_list_create();
method_map = ds_map_create();

socket = -1;
app_server = -1;
app_socket = -1;

to_off_callback_names = -1;

is_still_alive = false;
is_still_alive_force = false;

check_still_alive_room = -1;
time_sync_room = -1;

time_diff = 0;

received_str = '';

socket_server_host = '';

http_get_socket_server_host = http_get('http://' + UPPERCASE_SERVER_HOST + ':' + string(UPPERCASE_WEB_SERVER_PORT) + '/__SOCKET_SERVER_HOST?defaultHost=' + UPPERCASE_SERVER_HOST);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check server still alive.

if (socket != -1) {

    if (is_still_alive_force == true) {
    
        is_still_alive = true;
        
        // per 5 seconds.
        alarm[0] = room_speed * 5;
    }
    
    else {
        
        // 5초 이상 렉이 있으면 재접속
        if (delta_time / 1000000 &gt;= 5) {
            is_still_alive = false;
        }
        
        if (is_still_alive != true) {
            // disconnected.
            
            // off all to off callbacks.
            if (to_off_callback_names != -1) {
                for (var i = 0; i &lt; ds_list_size(to_off_callback_names); i += 1) {
                    OFF_ALL_FROM_ROOM_SERVER(ds_list_find_value(to_off_callback_names, i));
                }
                ds_list_destroy(to_off_callback_names);
                to_off_callback_names = -1;
            }
            
            network_destroy(socket);
            socket = -1;
            
            RUN_METHOD('__DISCONNECTED', '');
            
        } else {
        
            is_still_alive = false;
            
            ROOM_SEND_VALUE(check_still_alive_room, 'checkStr', '');
    
            // per 5 seconds.
            alarm[0] = room_speed * 5;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// __DISCONNECTED

if (ds_map_find_value(async_load, 'type') == '__UGMC__DISCONNECTED') {
    
    // off all to off callbacks.
    if (to_off_callback_names != -1) {
        for (var __I = 0; __I &lt; ds_list_size(to_off_callback_names); __I += 1) {
            OFF_ALL_FROM_ROOM_SERVER(ds_list_find_value(to_off_callback_names, __I));
        }
        ds_list_destroy(to_off_callback_names);
        to_off_callback_names = -1;
    }
    
    RUN_METHOD('__DISCONNECTED', ds_map_create());
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// receive data.

var __ASYNC_ID = ds_map_find_value(async_load, 'id');

if (__ASYNC_ID == socket) {

    received_str += buffer_read(ds_map_find_value(async_load, 'buffer'), buffer_string);
    
    while (true) {
    
        var __INDEX = string_pos(chr(13) + chr(10), received_str);
        var __LENGTH = string_length(received_str);
        
        if (__INDEX == 0 || __INDEX + 1 &gt; __LENGTH) {
            break;
        }
        
        var __STR = SUB_STR(received_str, 0, __INDEX);
        
        if (SUB_STR(__STR, 0, 7) == '__ALIVE') {
            is_still_alive = true;
        }
        
        else if (CHAR_AT(__STR, 0) == '@') {
            
            var index = INDEX_OF(__STR, ':');
            var params = SPLIT(SUB_STR(__STR, index + 1, string_length(__STR)), ',');
            
            RUN_METHOD(SUB_STR(__STR, 0, index), params);
            
            ds_list_destroy(params);
        }
        
        else {
        
            var __PARAMS = json_decode(__STR);
            
            if (__PARAMS != -1 &amp;&amp; ds_map_exists(__PARAMS, 'methodName') == true) {
            
                var __METHOD_NAME = ds_map_find_value(__PARAMS, 'methodName');
                
                var __DATA = -1;
                if (ds_map_exists(__PARAMS, 'data') == true) {
                    __DATA = ds_map_find_value(__PARAMS, 'data');
                }
                
                // run method.
                RUN_METHOD(__METHOD_NAME, __DATA);
                
                // off callback.
                if (to_off_callback_names != -1) {
                    var __CALLBACK_INDEX = ds_list_find_index(to_off_callback_names, __METHOD_NAME);
                    if (__CALLBACK_INDEX != -1) {
                        OFF_ALL_FROM_ROOM_SERVER(__METHOD_NAME);
                        ds_list_delete(to_off_callback_names, __CALLBACK_INDEX);
                    }
                }
                
                ds_map_destroy(__PARAMS);
            }
        }
    
        if (__INDEX + 1 == __LENGTH) {
            received_str = '';
        } else if (__INDEX + 1 &lt; __LENGTH) {
            received_str = SUB_STR(received_str, __INDEX + 1, __LENGTH);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// receive data. (native ver.)

var __ASYNC_ID = ds_map_find_value(async_load, 'id');
var __TYPE = ds_map_find_value(async_load, 'type');

if (__ASYNC_ID == app_server &amp;&amp; __TYPE == network_type_connect) {
    app_socket = ds_map_find_value(async_load, 'socket');
}

else if (__ASYNC_ID == app_socket &amp;&amp; __TYPE == network_type_data) {
    
    received_str += buffer_read(ds_map_find_value(async_load, 'buffer'), buffer_string);
    
    while (true) {
    
        var __INDEX = string_pos(chr(13) + chr(10), received_str);
        var __LENGTH = string_length(received_str);
        
        if (__INDEX == 0 || __INDEX + 1 &gt; __LENGTH) {
            break;
        }
        
        var __STR = SUB_STR(received_str, 0, __INDEX);
        var __KEY = real(SUB_STR(__STR, 0, 1));
        
        // connected
        if (__KEY == 0) {
        
            to_off_callback_names = ds_list_create();
        
            for (var __I = 0; __I &lt; ds_list_size(enter_room_names); __I += 1) {
                SEND_VALUE_TO_ROOM_SERVER('__ENTER_ROOM', ds_list_find_value(enter_room_names, __I));
            }
            
            if (time_sync_room == -1) {
                time_sync_room = ENTER_ROOM('UPPERCASE/timeSyncRoom');
                
                var now = date_current_datetime();
                
                ROOM_SEND_VALUE_WITH_CALLBACK(time_sync_room, 'sync', TIME_TO_JS_TIME(now), __SYNC_TIME_CALLBACK);
            }
            
            script_execute(connection_listener);
        }
        
        // connection failed
        else if (__KEY == 1) {
            script_execute(error_listener);
        }
        
        // message
        else if (__KEY == 2) {
        
            __STR = SUB_STR(__STR, 2, string_length(__STR));
            
            if (SUB_STR(__STR, 0, 7) == '__ALIVE') {
                is_still_alive = true;
            }
            
            else if (CHAR_AT(__STR, 0) == '@') {
                
                var index = INDEX_OF(__STR, ':');
                var params = SPLIT(SUB_STR(__STR, index + 1, string_length(__STR)), ',');
                
                RUN_METHOD(SUB_STR(__STR, 0, index), params);
                
                ds_list_destroy(params);
            }
            
            else {
                
                var __PARAMS = json_decode(__STR);
                
                if (__PARAMS != -1 &amp;&amp; ds_map_exists(__PARAMS, 'methodName') == true) {
                
                    var __METHOD_NAME = ds_map_find_value(__PARAMS, 'methodName');
                    
                    var __DATA = -1;
                    if (ds_map_exists(__PARAMS, 'data') == true) {
                        __DATA = ds_map_find_value(__PARAMS, 'data');
                    }
                    
                    // run method.
                    RUN_METHOD(__METHOD_NAME, __DATA);
                    
                    // off callback.
                    if (to_off_callback_names != -1) {
                        var __CALLBACK_INDEX = ds_list_find_index(to_off_callback_names, __METHOD_NAME);
                        if (__CALLBACK_INDEX != -1) {
                            OFF_ALL_FROM_ROOM_SERVER(__METHOD_NAME);
                            ds_list_delete(to_off_callback_names, __CALLBACK_INDEX);
                        }
                    }
                    
                    ds_map_destroy(__PARAMS);
                }
            }
        }
        
        // disconnected
        else if (__KEY == 3) {
        
            // off all to off callbacks.
            if (to_off_callback_names != -1) {
                for (var __I = 0; __I &lt; ds_list_size(to_off_callback_names); __I += 1) {
                    OFF_ALL_FROM_ROOM_SERVER(ds_list_find_value(to_off_callback_names, __I));
                }
                ds_list_destroy(to_off_callback_names);
                to_off_callback_names = -1;
            }
            
            RUN_METHOD('__DISCONNECTED', '');
        }
        
        if (__INDEX + 1 == __LENGTH) {
            received_str = '';
        } else if (__INDEX + 1 &lt; __LENGTH) {
            received_str = SUB_STR(received_str, __INDEX + 1, __LENGTH);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// receive socket server port.

var _id = ds_map_find_value(async_load, 'id');

if (_id == http_get_socket_server_host) {

    if (ds_map_find_value(async_load, 'status') == 0) {
    
        received_str = '';
    
        socket_server_host = ds_map_find_value(async_load, 'result');
        
        CONNECT_TO_ROOM_SERVER(socket_server_host, UPPERCASE_SOCKET_SERVER_PORT);
    
    } else {
        script_execute(error_listener);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
